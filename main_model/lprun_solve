Timer unit: 1e-07 s

Total time: 5.0304 s
File: c:\Users\sofie\OneDrive\Dokumenter\Skole\DynamicProgramming\DP_term_paper\main_model\model.py
Function: solve at line 140

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   140                                               def solve(self):
   141         1         46.0     46.0      0.0          par = self.par
   142         1         53.0     53.0      0.0          sol = self.sol
   143                                           
   144                                                   
   145         1         66.0     66.0      0.0          for t in range(par.Tmax-1, -1, -1):
   146         1         28.0     28.0      0.0              for i_type in range(par.Ntypes):
   147         2        100.0     50.0      0.0                  for i_S, S in enumerate(par.S_grid):
   148         2         41.0     20.5      0.0                      if t == par.Tmax-1: # solve last period one state at a time
   149        52       1224.0     23.5      0.0                          for i_a,a in enumerate(par.a_grid):
   150       303      11407.0     37.6      0.0                              for i_eps, eps in enumerate(par.eps_grid):
   151       253       4444.0     17.6      0.0                                  idx =(i_type,t,1,i_S,par.Ba+i_a,i_eps)
   152                                                                           
   153                                                                           # leave no assets
   154       253      50026.0    197.7      0.1                                  wage = wage_func(i_S,t,i_type,eps, par)
   155       253   50132854.0 198153.6     99.7                                  res = self.solve_last_v(idx)
   156                                           
   157                                                                           #assert res.success
   158                                           
   159       252      27930.0    110.8      0.1                                  if res.success:
   160       252      10186.0     40.4      0.0                                      ell = res.x[1]
   161       252       7223.0     28.7      0.0                                      c = res.x[0]
   162                                           
   163       252       7614.0     30.2      0.0                                      sol.c[idx] = c
   164       252       5570.0     22.1      0.0                                      sol.ell[idx] = ell
   165       252       8326.0     33.0      0.0                                      sol.a[idx] = a + wage*ell - c
   166       252       4202.0     16.7      0.0                                      sol.m[idx] = a
   167       252      12492.0     49.6      0.0                                      sol.V[idx] = -res.fun
   168       252      20123.0     79.9      0.0                                      sol.dV[idx] = -par.beta*par.kappa*(1+par.r)*((1+par.r)*(a+wage*ell-c))**(-par.rho)
   169                                                                           else:
   170                                                                               print(f'Did not converge at {idx}')
   171                                                                               print(a)
   172                                                                               print(wage)
   173                                                                               assert res.success
   174                                                                               # this becomes an issue if we allow for borrowing.
   175                                                                               #we can maybe try some trouble shooting or different starting values - or we can just interpolate over the holes in the policy functions :))
   176                                                               else:
   177                                                                   EGM.EGM_step(t, i_type, i_S, self) # EGM in working stage
   178                                                           if t < par.Smax:
   179                                                               EGM_DC(i_type, t, sol, par)